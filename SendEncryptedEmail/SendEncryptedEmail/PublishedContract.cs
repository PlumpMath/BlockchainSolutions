using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SendEncryptedEmail
{
    class PublishedContract
    {
        /*
         * Contract Address:
         * =================
         * 0x102805F387322190Ff589c950264Bf7C39BAEd71
         * 
         * Contract Live Link:
         * ===================
         * https://ropsten.etherscan.io/address/0x102805f387322190ff589c950264bf7c39baed71
         * 
         * Byte Code:
         * ==========
         * 6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611a258061005e6000396000f3006060604052600436106100a4576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308cdc7ed146100a957806341c0e1b5146100fa5780634df167251461010f5780636a0f93b31461024757806378210c381461033c578063a45f379e14610412578063cd98b63b14610487578063df62bdc5146105e3578063f6bd537814610654578063f7f4971a1461072a575b600080fd5b34156100b457600080fd5b6100e0600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610800565b604051808215151515815260200191505060405180910390f35b341561010557600080fd5b61010d610849565b005b341561011a57600080fd5b6101cc600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108da565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020c5780820151818401526020810190506101f1565b50505050905090810190601f1680156102395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025257600080fd5b6102c1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b7c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103015780820151818401526020810190506102e6565b50505050905090810190601f16801561032e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034757600080fd5b610397600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610dda565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d75780820151818401526020810190506103bc565b50505050905090810190601f1680156104045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041d57600080fd5b61046d600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fb1565b604051808215151515815260200191505060405180910390f35b341561049257600080fd5b610568600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fdc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105a857808201518184015260208101905061058d565b50505050905090810190601f1680156105d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105ee57600080fd5b61063e600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506112d7565b6040518082815260200191505060405180910390f35b341561065f57600080fd5b6106af600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061134c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106ef5780820151818401526020810190506106d4565b50505050905090810190601f16801561071c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561073557600080fd5b610785600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061163c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107c55780820151818401526020810190506107aa565b50505050905090810190601f1680156107f25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561083f5760019050610844565b600090505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156108d8576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b6108e261192c565b600015156108ef84610fb1565b15151415610b10578373ffffffffffffffffffffffffffffffffffffffff166001846040518082805190602001908083835b6020831015156109465780518252602082019150602081019050602083039250610921565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610b0b57816004846040518082805190602001908083835b6020831015156109ef57805182526020820191506020810190506020830392506109ca565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190610a35929190611940565b5060036006846040518082805190602001908083835b602083101515610a705780518252602082019150602081019050602083039250610a4b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550606060405190810160405280602c81526020017f456d61696c20656e6372797074696f6e206b657920776173206164646564207381526020017f75636365737366756c6c792100000000000000000000000000000000000000008152509050610b75565b610b74565b606060405190810160405280602781526020017f4e6f20656d61696c20666f756e642e20456e74657220612076616c696420656d81526020017f61696c2049642e000000000000000000000000000000000000000000000000008152509050610b75565b5b9392505050565b610b8461192c565b60001515610b9183610fb1565b15151415610d9b57826001836040518082805190602001908083835b602083101515610bd25780518252602082019150602081019050602083039250610bad565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336002836040518082805190602001908083835b602083101515610c7c5780518252602082019150602081019050602083039250610c57565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006006836040518082805190602001908083835b602083101515610d275780518252602082019150602081019050602083039250610d02565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506040805190810160405280602081526020017f456d61696c20496420776173206164646564207375636365737366756c6c79218152509050610dd4565b6040805190810160405280601e81526020017f506c6561736520656e74657220612076616c696420456d61696c2049442e000081525090505b92915050565b610de261192c565b60001515610def83610fb1565b15151415610f735760046006836040518082805190602001908083835b602083101515610e315780518252602082019150602081019050602083039250610e0c565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506004826040518082805190602001908083835b602083101515610ea05780518252602082019150602081019050602083039250610e7b565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f675780601f10610f3c57610100808354040283529160200191610f67565b820191906000526020600020905b815481529060010190602001808311610f4a57829003601f168201915b50505050509050610fac565b6040805190810160405280601781526020017f456e74657220612076616c696420656d61696c2049642e00000000000000000081525090505b919050565b6000610fbb6119c0565b829050600081511415610fd15760019150610fd6565b600091505b50919050565b610fe461192c565b60001515610ff185610fb1565b15151415611292573373ffffffffffffffffffffffffffffffffffffffff166001856040518082805190602001908083835b6020831015156110485780518252602082019150602081019050602083039250611023565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561128d57826003856040518082805190602001908083835b6020831015156110f157805182526020820191506020810190506020830392506110cc565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209080519060200190611137929190611940565b50816005856040518082805190602001908083835b602083101515611171578051825260208201915060208101905060208303925061114c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090805190602001906111b7929190611940565b5060016006856040518082805190602001908083835b6020831015156111f257805182526020820191506020810190506020830392506111cd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081905550606060405190810160405280603681526020017f456d61696c206861736820616e6420656e6372797074696f6e206b657920776581526020017f7265206164646564207375636365737366756c6c79210000000000000000000081525090506112d0565b6112cf565b6040805190810160405280601e81526020017f506c6561736520656e74657220612076616c696420456d61696c2049642e000081525090506112d0565b5b9392505050565b60006006826040518082805190602001908083835b60208310151561131157805182526020820191506020810190506020830392506112ec565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b61135461192c565b6000151561136183610fb1565b151514156115fe57600015156114796003846040518082805190602001908083835b6020831015156113a85780518252602082019150602081019050602083039250611383565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561146f5780601f106114445761010080835404028352916020019161146f565b820191906000526020600020905b81548152906001019060200180831161145257829003601f168201915b5050505050610fb1565b151514156115fd5760026006836040518082805190602001908083835b6020831015156114bb5780518252602082019150602081019050602083039250611496565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506003826040518082805190602001908083835b60208310151561152a5780518252602082019150602081019050602083039250611505565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115f15780601f106115c6576101008083540402835291602001916115f1565b820191906000526020600020905b8154815290600101906020018083116115d457829003601f168201915b50505050509050611637565b5b6040805190810160405280601481526020017f4e6f20656d61696c206861736820666f756e642e00000000000000000000000081525090505b919050565b61164461192c565b6000151561165183610fb1565b151514156118ee57600015156117696005846040518082805190602001908083835b6020831015156116985780518252602082019150602081019050602083039250611673565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561175f5780601f106117345761010080835404028352916020019161175f565b820191906000526020600020905b81548152906001019060200180831161174257829003601f168201915b5050505050610fb1565b151514156118ed5760026006836040518082805190602001908083835b6020831015156117ab5780518252602082019150602081019050602083039250611786565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506005826040518082805190602001908083835b60208310151561181a57805182526020820191506020810190506020830392506117f5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118e15780601f106118b6576101008083540402835291602001916118e1565b820191906000526020600020905b8154815290600101906020018083116118c457829003601f168201915b50505050509050611927565b5b6040805190810160405280601f81526020017f4e6f20656e6372797074696f6e207075626c6963206b657920666f756e642e0081525090505b919050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061198157805160ff19168380011785556119af565b828001600101855582156119af579182015b828111156119ae578251825591602001919060010190611993565b5b5090506119bc91906119d4565b5090565b602060405190810160405280600081525090565b6119f691905b808211156119f25760008160009055506001016119da565b5090565b905600a165627a7a72305820beec075b77da5a04c843d661db0b3763e7a282d20e658c48f14bfe325caf96c80029
         * 
         * 
         * ABI/Interface:
         * ==============
         * [{"constant":true,"inputs":[{"name":"recipientAddress","type":"address"}],"name":"isEmptyAddress","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"recipientAddress","type":"address"},{"name":"eId","type":"string"},{"name":"ekey","type":"string"}],"name":"confirmEmailHash","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"recipientAddress","type":"address"},{"name":"eId","type":"string"}],"name":"uploadEmailId","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eId","type":"string"}],"name":"getEmailKey","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"string"}],"name":"isEmptyString","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"eId","type":"string"},{"name":"eHash","type":"string"},{"name":"ePublicKey","type":"string"}],"name":"confirmReceivalAndUploadEmailHash","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"eId","type":"string"}],"name":"updateEmailStatus","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"eId","type":"string"}],"name":"getEmailHash","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"eId","type":"string"}],"name":"getEmailEncryptionPublicKey","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]
         * 
         * 
         * Code:
         * =====
         *pragma solidity ^0.4.0;

            contract KeysExchange {
                address contractOwner;

                mapping(string => address) emailsIds;
                mapping(string => address) emailsSendersList;
                mapping(string => string) emailsHashes;
                mapping(string => string) emailsKeys;
                mapping(string => string) emailsEncryptionPublicKeys;
                mapping(string => int) emailsStatus;


                 function KeysExchange() public{
                    contractOwner = msg.sender;
                }

                function uploadEmailId(address recipientAddress, string eId) public returns(string){
                    if(isEmptyString(eId) == false){
                         emailsIds[eId] = recipientAddress ;
                         emailsSendersList[eId] = msg.sender;
                         emailsStatus[eId] = 0;
                         return "Email Id was added successfully!"; 
                    }
                    else 
                        return "Please enter a valid Email ID.";
                }

                function confirmReceivalAndUploadEmailHash(string eId, string eHash, string ePublicKey) public returns(string) {
                    if(isEmptyString(eId) == false){
                         if(emailsIds[eId] == msg.sender) {
                            emailsHashes[eId] = eHash;
                            emailsEncryptionPublicKeys[eId] = ePublicKey;
                            emailsStatus[eId] = 1;
                            return "Email hash and encryption key were added successfully!"; 
                         }
                    }
                    else 
                        return "Please enter a valid Email Id.";
                }

                function getEmailHash(string eId) public returns(string){
                    if(isEmptyString(eId) == false){
                        if(isEmptyString(emailsHashes[eId]) == false){
                             emailsStatus[eId] = 2;
                           return emailsHashes[eId];
                        }
                    } 
                    return "No email hash found.";
                }

                function getEmailEncryptionPublicKey(string eId) public returns(string){
                    if(isEmptyString(eId) == false){
                        if(isEmptyString(emailsEncryptionPublicKeys[eId]) == false){
                             emailsStatus[eId] = 2;
                            return emailsEncryptionPublicKeys[eId];
                        }
                    } 
                    return "No encryption public key found.";
                }

                function confirmEmailHash(address recipientAddress, string eId, string ekey) public returns(string){
                    if(isEmptyString(eId) == false){
                         if(emailsIds[eId] == recipientAddress){
                            emailsKeys[eId] = ekey;
                             emailsStatus[eId] = 3;
                            return "Email encryption key was added successfully!"; 
                         }
                    }
                    else 
                        return "No email found. Enter a valid email Id.";
                }

                function getEmailKey(string eId) public returns(string){
                    if(isEmptyString(eId) == false){
                        emailsStatus[eId] = 4;
                        return emailsKeys[eId]; 
                    }
                    else 
                        return "Enter a valid email Id.";
                }
    
                function updateEmailStatus(string eId) view public returns(int){
                    return  emailsStatus[eId];
                }

                function isEmptyString(string key) pure public returns(bool){
                    bytes memory tempKey = bytes(key);
                    if(tempKey.length == 0)
                        return true;
                    else
                        return false;
                }

                function isEmptyAddress(address recipientAddress) pure public returns(bool){
                    if(recipientAddress == address(0))
                        return true;
                    else
                        return false;
                }
    
                 function kill() public{ 
                    if (msg.sender == contractOwner){
                        selfdestruct(contractOwner);  // kills this contract and sends remaining funds back to creator
                    }
                 }
            }
         */
    }
}
